#!/usr/bin/env nix-shell
#!nix-shell -i bash -p jq gum

export YTMUSIC_PLUGIN_BASE_DIR
YTMUSIC_PLUGIN_BASE_DIR=${YTMUSIC_PLUGIN_BASE_DIR:-$(
  dirname "$(
    readlink -f "${BASH_SOURCE[0]}"
  )"
)}

source "${YTMUSIC_PLUGIN_BASE_DIR}/api/main.sh"
source "${YTMUSIC_PLUGIN_BASE_DIR}/api/utils.sh"

create_song_list() {
  local obj="$1"
  local extraJson
  local id
  local type
  local recommend

  eval "$(jq -r '@sh "
    id=\(.target.value)
    type=\(.target.type)
    recommend=\(.options.recommend // false)
  "' <<<"$obj")"

  gum log --level debug "Creating song list with:" "$(echo "$obj" | jq -c)"

  if [ "$recommend" == "false" ] && [ "$type" == "song" ]; then
    extraJson="$(
      jq \
        -n \
        --arg videoId "$id" '{
          "videoId": $videoId
        }'
    )"
  elif [ "$recommend" == "false" ] && [ "$type" == "artist" ]; then
    get_all_artist_songs "$id"
    return
  else
    playlistId=$(buildPlaylistId "$obj")
    extraJson="$(
      jq \
        -n \
        --arg pid "$playlistId" '{
        "playlistId": $pid
      }'
    )"
  fi

  # Add --cache flag when recommend is false and type is album
  local cache_flag=""
  if [ "$recommend" == "false" ] && [ "$type" == "album" ]; then
    cache_flag="--cache"
  fi

  ytapi $cache_flag next "$extraJson" |
    jq \
      --compact-output \
      --raw-output \
      --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/ytmusic-playlist-to-songs.jq"
}

create_search_list() {
  local obj="$1"
  local target
  local id
  local type

  eval "$(jq -r '@sh "
    type=\(.target.type)
    query=\(.target.value)
  "' <<<"$obj")"

  if [ "$type" == "artist" ]; then
    artist_search "$query"
    return
  elif [ "$type" == "playlist" ]; then
    playlist_search "$query"
    return
  elif [ "$type" == "song" ]; then
    song_search "$query"
    return
  elif [ "$type" == "album" ]; then
    album_search "$query"
    return
  elif [ "$type" == "all" ]; then
    all_search "$query"
    return
  else
    gum log --level error "Invalid search type: $type"
    return 1
  fi
}

create_playlist_list() {
  local obj="$1"

  playlistId=$(buildPlaylistId "$obj")
  extraJson="$(
    jq \
      -n \
      --arg pid "$playlistId" '{
        "playlistId": $pid
      }'
  )"

  json=$(ytapi next "$extraJson")

  album=$(
    echo "$json" |
      jq -r '
        .contents
        .singleColumnMusicWatchNextResultsRenderer
        .tabbedRenderer
        .watchNextTabbedResultsRenderer
        .tabs[0]
        .tabRenderer
        .content
        .musicQueueRenderer
        | {
          name: (
            .header
            .musicQueueHeaderRenderer
            .subtitle
            .runs[0]
            .text
          ),
          id: (
            .content
            .playlistPanelRenderer
            .playlistId
          )
        }
      '
  )

  songs=$(
    echo "$json" |
      jq --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/ytmusic-playlist-to-songs.jq" | jq -s
  )

  jq -s '{
    id: .[0].id,
    name: .[0].name,
    songs: .[1]
  }' <(echo "$album") <(echo "$songs")
}

all_to_olak() {
  while read -r json; do
    album_id=$(echo "$json" | jq -r '.album.sources.ytmusic.id')
    if [ "$album_id" != "null" ]; then
      new_id=$(mpreb_to_olak "$album_id")
      echo "$json" | jq --arg new_id "$new_id" '.album.sources.ytmusic.id = $new_id'
    else
      echo "$json"
    fi
  done
}

create_album_list() {
  local obj="$1"
  local id
  local type
  local recommend

  eval "$(jq -r '@sh "
    id=\(.target.value)
    type=\(.target.type)
    recommend=\(.options.recommend // false)
  "' <<<"$obj")"

  if [ "$recommend" == "false" ] && [ "$type" == "artist" ]; then
    artist_albums "$id"
    return
  elif [ "$recommend" == "false" ] && [ "$type" == "song" ]; then
    extraJson="$(
      jq \
        -n \
        --arg videoId "$id" '{
          "videoId": $videoId
        }'
    )"
  else
    playlistId=$(buildPlaylistId "$obj")
    extraJson="$(
      jq \
        -n \
        --arg pid "$playlistId" '{
          "playlistId": $pid
        }'
    )"
  fi

  local cache_flag=""
  if [ "$recommend" == "false" ] && [ "$type" == "album" ]; then
    cache_flag="--cache"
  fi

  ytapi $cache_flag next "$extraJson" |
    jq \
      --compact-output \
      --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/ytmusic-playlist-to-songs.jq" |
    all_to_olak |
    jq \
      --slurp \
      --compact-output \
      --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/deadwax-songs-to-albums.jq"
}

create_artist_list() {
  local obj="$1"
  local id
  local type
  local recommend

  eval "$(jq -r '@sh "
    id=\(.target.value)
    type=\(.target.type)
    recommend=\(.options.recommend // false)
  "' <<<"$obj")"

  if [ "$recommend" == "false" ] && [ "$type" == "artist" ]; then
    # HACK: Were getting all of the songs then transforming them into albums then grouping by artist. might be better to just call the all albums api.
    get_all_artist_songs "$id" |
      all_to_olak |
      jq \
        --slurp \
        --compact-output \
        --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/deadwax-songs-to-albums.jq" |
      jq \
        --compact-output \
        --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/ytmusic-albums-to-artists.jq" |
      jq \
        --compact-output \
        'select(.sources.ytmusic.id == "'"$id"'")'

    return
  elif [ "$recommend" == "false" ] && [ "$type" == "song" ]; then
    extraJson="$(
      jq \
        -n \
        --arg videoId "$id" '{
          "videoId": $videoId
        }'
    )"
  else
    playlistId=$(buildPlaylistId "$obj")
    extraJson="$(
      jq \
        -n \
        --arg pid "$playlistId" '{
          "playlistId": $pid
        }'
    )"
  fi

  # Add --cache flag when recommend is false and type is album
  local cache_flag=""
  if [ "$recommend" == "false" ] && [ "$type" == "album" ]; then
    cache_flag="--cache"
  fi

  ytapi $cache_flag next "$extraJson" |
    jq \
      --compact-output \
      --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/ytmusic-playlist-to-songs.jq" |
    jq \
      --slurp \
      --compact-output \
      --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/deadwax-songs-to-albums.jq" |
    all_to_olak |
    jq \
      --compact-output \
      --from-file "${YTMUSIC_PLUGIN_BASE_DIR}/api/jq/ytmusic-albums-to-artists.jq"
}

validate_options() {
  local request="$1"
  local type="$2"
  local id="$3"
  local recommend="$4" # Note: spelling fixed and tag parameter removed

  # Check if id is a playlist ID
  if [[ "$id" =~ ^PL[A-Za-z0-9_-]{32}$ ]]; then
    if [[ "$recommend" != "false" ]]; then # Changed to check any recommend value
      gum log --level warn "Option --recommend is incompatible with playlists"
      return 1
    fi
  fi
  return 0
}

process_input() {
  local json="$1"
  local request
  local target
  local recommend

  request=$(echo "$json" | jq -r '.request')
  target=$(echo "$json" | jq -r '.target')
  recommend=$(echo "$json" | jq -r '.options.recommend // false')

  # Check if target is already evolved (has type and value fields)
  if [ "$request" != "search" ] && ! echo "$target" | jq -e 'has("type") and has("value")' >/dev/null 2>&1; then
    target=$(evolve_id "$target") || {
      gum log --level error "Failed to process ID: $target"
      exit 1
    }
  fi

  # Extract the ID for validation if target is evolved
  local target_id
  if echo "$target" | jq -e 'has("type") and has("value")' >/dev/null 2>&1; then
    target_id=$(echo "$target" | jq -r '.value')
  else
    target_id="$target"
  fi

  validate_options "$request" "$target_id" "$recommend" || {
    exit 1
  }

  local obj
  obj=$(
    jq \
      -n \
      --argjson target "$target" \
      --arg request "$request" \
      --arg recommend "$recommend" '{
        request: $request,
        target: $target,
        options: {
          recommend: (
            if $recommend == "false" then false
            elif $recommend == "true" then true
            else $recommend
            end
          )
        }
      }'
  )

  case "$request" in
  "song")
    create_song_list "$obj"
    ;;
  "album")
    create_album_list "$obj"
    ;;
  "artist")
    create_artist_list "$obj"
    ;;
  "playlist")
    create_playlist_list "$obj"
    ;;
  "search")
    create_search_list "$obj"
    ;;
  *)
    gum log --level error "Invalid request: $request"
    exit 1
    ;;
  esac
}

# Read JSON from stdin
json=$(cat)

# Validate JSON format
if ! echo "$json" | jq empty >/dev/null 2>&1; then
  gum log --level error "Invalid JSON input"
  exit 1
fi

process_input "$json"

###################
# Get Album Objects
###################

# albumId -> Albums (single, with tracks)
# process_input '{
#   "request": "albums",
#   "target": "OLAK5uy_nwYNSdFlj62YfTpdzN1-hS3aSJupdZBuU"
# }'

# albumId -> Albums (recommended)
# process_input '{
#   "request": "albums",
#   "target":"OLAK5uy_m80Evo-9vz_8XceYZ5xiRnlvifZRSAfCA",
#   "options": {
#     "recommend": true
#   }
# }'

# TODO: albumId -> Albumd (recommended, jazz)
# NOTE: Might not be able to get this to work, genres ids are non-standard
# process_input '{
#   "request": "albums",
#   "options": {
#     "recommend": true,
#     "tag": "jazz"
#   },
#   "target":"OLAK5uy_m80Evo-9vz_8XceYZ5xiRnlvifZRSAfCA"
# }'

# artistId -> Albums
# process_input '{
#   "request": "albums",
#   "target":"UCXLOW_7PSxTq3kVaZZQoMEg"
# }'

# artistId -> Albums recommend
# process_input '{
#   "request": "albums",
#   "target":"UCXLOW_7PSxTq3kVaZZQoMEg",
#   "options": {
#     "recommend": true
#   }
# }'

# artistId -> Albums recommend (jazz)
# process_input '{
#   "request": "albums",
#   "target":"UCXLOW_7PSxTq3kVaZZQoMEg",
#   "options": {
#     "recommend": "jazz"
#   }
# }'

# songId -> Albums
# process_input '{
#   "request": "albums",
#   "target":"XJF_65gLJNA"
# }'

# songId -> Album recomnedations
# process_input '{
#   "request": "albums",
#   "target":"ONHA6YHjI9o",
#   "options": {
#     "recommend": true
#   }
# }'

# songId -> Album recomnedations (jazz
# process_input '{
#   "request": "albums",
#   "target":"ONHA6YHjI9o",
#   "options": {
#     "recommend": "metal"
#   }
# }'

# playlistId -> Albums
# process_input '{
#   "request": "albums",
#   "target":"PLRcY50fIZFfIeR3BCrdQTK82RGfco8dUK"
# }'

###################
# Get Artist Objects
###################

# TODO: Artist ID -> Single Artist Obj
# process_input '{
#   "request": "artists",
#   "target":"UCXLOW_7PSxTq3kVaZZQoMEg"
# }'

# Artist - other artists -> recommend
# process_input '{
#   "request": "artists",
#   "target": {
#     "type": "artist",
#     "value": "UCXLOW_7PSxTq3kVaZZQoMEg"
#   },
#   "options": {
#     "recommend": true
#   }
# }'

# albumId -> artist obj
# process_input '{
#   "request": "artists",
#   "target": "OLAK5uy_nwYNSdFlj62YfTpdzN1-hS3aSJupdZBuU"
# }'

# albumId -> artist recomendations
# process_input '{
#   "request": "artists",
#   "target":"OLAK5uy_m80Evo-9vz_8XceYZ5xiRnlvifZRSAfCA",
#   "options": {
#     "recommend": true
#   }
# }'

# songId -> artist obj
# process_input '{
#   "request": "artists",
#   "target":"ONHA6YHjI9o"
# }'

# songId -> artist recommend
# process_input '{
#   "request": "artists",
#   "target":"ONHA6YHjI9o",
#   "options": {
#     "recommend": true
#   }
# }'

# playlistId -> artists
# process_input '{
#   "request": "artists",
#   "target":"PLRcY50fIZFfIeR3BCrdQTK82RGfco8dUK"
# }'

###################
# Get Song Objects
###################

# songId -> song (single)
# process_input '{
#   "request": "songs",
#   "target":"XJF_65gLJNA"
# }'

# albumId => song objects
# process_input '{
#   "request": "songs",
#   "target":"OLAK5uy_m80Evo-9vz_8XceYZ5xiRnlvifZRSAfCA"
# }'

# albumId => recommend song objects
# process_input '{
#   "request": "songs",
#   "target":"OLAK5uy_m80Evo-9vz_8XceYZ5xiRnlvifZRSAfCA"
#   "options": {
#     "recommend": true
#   }
# }'

# artistId -> song objects
# process_input '{
#   "request": "songs",
#   "target": "UCXLOW_7PSxTq3kVaZZQoMEg"
# }'

# artistId -> recommended songs
# process_input '{
#   "request": "songs",
#   "target":"https://music.youtube.com/playlist?list=OLAK5uy_l4DXWmUUkSHLgOI1QXFzfJ2i5fU2Twx1Q",
#   "options": {
#     "recommend": true
#   }
# }'

# artistId -> recommended songs (jazz)
# process_input '{
#   "request": "songs",
#   "target":"UCzh6E5PwoxNGhn3Nwf2rrOg",
#   "options": {
#     "recommend": "jazz"
#   }
# }'

# songId -> recommend songs
# process_input '{
#   "request": "songs",
#   "target":"ONHA6YHjI9o",
#   "options": {
#     "recommend": true
#   }
# }'

# songId -> recommended songs (jazz)
# process_input '{
#   "request": "songs",
#   "target":"ONHA6YHjI9o",
#   "options": {
#     "recommend": "jazz"
#   }
# }'

# playlistId -> songs
# BUG: only getting first 50 songs
# process_input '{
#   "request": "songs",
#   "target": "PLRcY50fIZFfIeR3BCrdQTK82RGfco8dUK"
# }'

######################
# Get Playlist Objects
######################

# playistId -> playlist obj
# process_input '{
#   "request": "playlists",
#   "target": "https://music.youtube.com/playlist?list=RDCLAK5uy_lGEOjy5U8xV41C8_LyqNnAZKOH6sGyutI"
# }'

####################
# Get Search Objects
####################

# process_input '{
#   "request": "search",
#   "target": {
#     "type": "album",
#     "value": "ungod"
#   }
# }'

# process_input '{
#   "request": "search",
#   "target": {
#     "type": "artist",
#     "value": "architecture"
#   }
# }'

# process_input '{
#   "request": "search",
#   "target": {
#     "type": "song",
#     "value": "darkest days stabbing westward"
#   }
# }'

# process_input '{
#   "request": "search",
#   "target": {
#     "type": "playlist",
#     "value": "katy perry"
#   }
# }'
